---
import Principal from "../../../layout/principal.astro";
import Appearances_episode from "../../../components/Apperances/appearances_episode.astro";
import Boton from "../../../components/boton.astro";

// Parametro que se obtendra de la url "/Character/{name}" para realizar las consultas
const { character } = Astro.params;

export async function getStaticPaths() {
  // Almacenara intancias de objetos de la informaci칩n de todos los personajes donde contendra la rutas dinamicas para que astro los se haga automaticamente haciendo las consultas atravez del id de cada personaje
  let api_array = [];

  // variable temporal para almacenar de tipo objeto los links de cada p치gina y agregarlo al arreglo "api_array"
  let tempo;

  // consulta a la api
  const data = await fetch("https://rickandmortyapi.com/api/character").then(
    (response) => response.json()
  );
  for (let index = 1; index < data.info.count + 1; index++) {
    tempo = { params: { character: "" + index } };
    api_array.push(tempo);
  }

  // retornara todos los links de las paginas de forma din치mica para mostrar todos los datos de los personajes de la api
  return api_array;
}

// contendra en formato json la api y usarlo afuera del servidor dentro del cliente
let informacion;

try {
  const response = await fetch(
    "https://rickandmortyapi.com/api/character/" + character
  );
  informacion = await response.json();
} catch (error) {
  console.error(error);
}

// se utilizara para determinar el status de cada personaje y asignarles un dise침o unico para identificar si esta vivo (verde) o si esta muerto (rojo)
let color;
if (informacion.status === "Alive") {
  color = "green";
} else {
  color = "red";
}
---

<Principal title={informacion.name}>
  <article class="contenedor_character">
    <div class="informacion_character">
      <picture>
        <img
          src={informacion.image}
          alt={informacion.name}
          transition:name=`imagen_${informacion.id}`
        />
      </picture>
      <section class="informacion_principal">
        <span class="status" style={`background-color:${color}`}>
          {informacion.status}
        </span>
        <p class="text">
          Name: <span>{informacion.name}</span>
        </p>
        <p class="text">Species: <span>{informacion.species}</span></p>
        <p class="text">Gender: <span>{informacion.gender}</span></p>
        <p class="text">Location: <span>{informacion.location.name}</span></p>
        <p class="text">Origin: <span>{informacion.origin.name}</span></p>
      </section>
    </div>

    <div class="contenedor_paticipaciones">
      <p class="title">Episodes Appearances</p>
      <div class="participaciones">
        <!-- Agregar las apariciones de cada personaje en este div -->
        {
          informacion.episode.map((info) => {
            return <Appearances_episode url={info} />;
          })
        }
      </div>
    </div>
    <Boton name="Character" />
  </article>
</Principal>

<style>
  .contenedor_paticipaciones {
    padding: 10vh 0 0 0;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    width: 100%;
  }

  article {
    padding: 10vh 0 20vh 0;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
  }

  picture {
    width: 550px;
  }

  .informacion_character {
    width: 80%;
    max-width: 1100px;
    display: flex;
    margin: 0;
    padding: 0;
    background-color: var(--bg_hr);
    border-radius: 30px;
  }

  .informacion_principal {
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    margin: 40px;
    font-family: sans-serif;
  }

  img {
    width: 100%;
    height: 100%;
    border-radius: 20px 0 0 20px;
  }

  .text {
    color: var(--vrd_clr);
    font-size: 20px;
    font-weight: 900;
    text-transform: uppercase;
    font-family: "Montserrat", sans-serif;
  }

  .text span {
    color: var(--letras);
    font-weight: 400;
    text-transform: capitalize;
  }

  .status {
    padding: 10px;
    text-transform: capitalize;
    border-radius: 10px;
    width: fit-content;
    font-weight: 700;
    color: var(--letras);
  }

  a {
    color: var(--vrd_clr);
  }

  .participaciones {
    padding: 10vh 0;
    width: 80%;
    color: var(--letras);
    margin: auto;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    gap: 30px;
  }

  .title {
    font-size: 40px;
    font-family: Get Schwifty;
    font-weight: 800;
    color: var(--vrd_drk);
  }

  @media screen and (max-width: 990px) {
    .informacion_character {
      flex-direction: column;
      width: 80%;
    }

    picture {
      width: 100%;
    }

    img {
      border-radius: 20px 20px 0 0;
    }

    .title {
      font-size: 25px;
    }
  }
</style>
